%YAML 1.1
---
project: haros_tutorials
packages:
    - fictibot_drivers
    - fictibot_controller
    - minimal_example
configurations:
    barebones:
        - minimal_example/launch/minimal.launch
    minimal:
        - fictibot_controller/launch/minimal.launch
    dual_bots:
        - fictibot_controller/launch/dual_bots.launch
    double_remap:
        - fictibot_controller/launch/double_remap.launch
    missing_remap:
        - fictibot_controller/launch/missing_remap.launch
    missing_node:
        - fictibot_controller/launch/missing_node.launch
    name_collision:
        - fictibot_controller/launch/name_collision.launch
    params:
        - fictibot_controller/launch/params.launch
    rosparam:
        - fictibot_controller/launch/rosparam.launch
    type_check:
        - fictibot_controller/launch/type_check.launch
    multiplex:
        - fictibot_controller/launch/multiplexer.launch
rules:
    no_conditional_comm:
        name: No Conditional Communications
        description: "Advertise, Subscribe, AdvertiseService and ServiceClient
                      should not be called under control flow structures."
        tags:
            - code-standards
            - custom
            - ros-comm
        query: "nodes/advertise[self.control_depth > 0] |
                nodes/subscribe[self.control_depth > 0] |
                nodes/service[self.control_depth > 0] |
                nodes/client[self.control_depth > 0]"
    type_check_topics:
        name: Message Types Must Match
        description: Message types at both ends of a topic must match.
        tags:
            - code-standards
            - custom
            - ros-comm
            - type-checking
        scope: configuration
        query: "for p in <nodes/publishers | nodes/subscribers>,
                    q in <nodes/publishers | nodes/subscribers>
                where p.topic_name == q.topic_name and p.type != q.type
                return p, q"
    infinite_queues:
        name: Avoid Infinite Topic Queues
        description: Topic message queues should not use a queue size of zero.
        tags:
            - code-standards
            - ros
            - ros-comm
        query: "nodes/advertise[self.queue_size == 0] |
                nodes/subscribe[self.queue_size == 0]"
    advertise_queue_1:
        name: Publishers With a Queue of Size 1
        description: Publishers with a queue of size 1 can possibly lose messages.
        tags:
            - code-standards
            - custom
            - ros-comm
        query: "nodes/advertise[self.queue_size == 1]"
    subscriber_queue_enough:
        name: Sufficiently Big Subscriber Queues
        description: "Subscribers must have a queue with a size that is big enough
                        for the expected amount of publishers on the topic."
        tags:
            - code-standards
            - custom
            - ros-comm
        query: "for s in <configs/nodes/subscribers[self.queue_size != None
                                                    and self.queue_size > 0]>
                let p = <configs/nodes/publishers[self.topic_name == s.topic_name
                                                  and self.queue_size != None]>
                where some a in <p> satisfies (a.queue_size == 0)
                                    or (s.queue_size < sum(<p/queue_size>)
                                    or s.queue_size <= len(p))
                return s"
    disconnected_similar_topics:
        name: No Disconnected Similar Topics
        description: "If two topics are similar and disconnected, it is possible
                        that there is a missing remap."
        tags:
            - code-standards
            - custom
            - ros-comm
        query: "for c in <configs>
                let pairs = {
                    for pub in <c/nodes/publishers[self.topic.is_disconnected]>,
                        sub in <c/nodes/subscribers[self.topic.is_disconnected]>
                    where pub.type == sub.type and
                        (pub.topic.id.endswith(sub.topic.name)
                        or sub.topic.id.endswith(pub.topic.name)
                        or pub.rosname.full == sub.rosname.full
                        or pub.rosname.full.endswith(sub.rosname.own)
                        or sub.rosname.full.endswith(pub.rosname.own)
                        or pub.rosname.given == sub.rosname.given)
                    return 'pub':pub, 'sub':sub
                }
                where len(pairs) > 0
                return c, pairs"
