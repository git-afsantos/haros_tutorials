%YAML 1.1
# This file defines architectural queries for some configurations of Fictibot,
# to evaluate with the plugin `haros_plugin_pyflwor`.
# plugin: https://github.com/git-afsantos/haros-plugin-pyflwor
---
project: Fictibot
packages:
    - fictibot_drivers
    - fictibot_random_controller
    - fictibot_safety_controller
    - fictibot_multiplex
    - fictibot_msgs
    - fictibot_launch
configurations:
    minimal:
        launch:
            - fictibot_launch/launch/minimal.launch
        user_data:
            haros_plugin_pyflwor:
                - name: Query 6 - One Publisher Per Topic
                  details: "Found {n} topics with multiple publishers - {entities}"
                  query: "topics[len(self.publishers) > 1]"
    dual_bots:
        launch:
            - fictibot_launch/launch/dual_bots.launch
        user_data:
            haros_plugin_pyflwor:
                - name: Query 6 - One Publisher Per Topic
                  details: "Found {n} topics with multiple publishers - {entities}"
                  query: "topics[len(self.publishers) > 1]"
    safe_random_walker:
        launch:
            - fictibot_launch/launch/safe_random_walker.launch
        user_data:
            haros_plugin_pyflwor:
                - name: Query 6 - One Publisher Per Topic
                  details: "Found {n} topics with multiple publishers - {entities}"
                  query: "topics[len(self.publishers) > 1]"
    type_check:
        launch:
            - fictibot_launch/launch/type_check.launch
        user_data:
            haros_plugin_pyflwor:
                - name: Query 3 - Message Types Must Match
                  details: "Found two participants on the same topic with
                            mismatching message types - {entities}"
                  query: "for p in <nodes/publishers | nodes/subscribers>,
                              q in <nodes/publishers | nodes/subscribers>
                          where p.topic_name == q.topic_name and p.type != q.type
                          return p, q"
                - name: Query 1 - One Publisher Per Topic
                  details: "Found {n} topics with multiple publishers - {entities}"
                  query: "topics[len(self.publishers) > 1]"
                - name: Query 2 - Message Types Must Match
                  details: "Found {n} topics with multiple message types - {entities}"
                  query: "topics[len(self.types) > 1]"
                - name: Query 7 - No Disconnected Similar Topics
                  details: "Found two topics with similar names and type,
                            but they are not connected. It could be a missing
                            remapping. {entities}"
                  query: "for pub in <c/nodes/publishers[self.topic.is_disconnected]>,
                              sub in <c/nodes/subscribers[self.topic.is_disconnected]>
                          where pub.type == sub.type and
                            (pub.topic.id.endswith(sub.topic.name)
                              or sub.topic.id.endswith(pub.topic.name)
                              or pub.rosname.full == sub.rosname.full
                              or pub.rosname.full.endswith(sub.rosname.own)
                              or sub.rosname.full.endswith(pub.rosname.own)
                              or pub.rosname.given == sub.rosname.given)
                          return 'pub':pub, 'sub':sub"
    multiplex:
        launch:
            - fictibot_launch/launch/multiplexer.launch
        user_data:
            haros_plugin_pyflwor:
                - name: Query 1 - Avoid Using Global Names
                  details: "Found {entities} using global names."
                  query: "topics/publishers[self.rosname.is_global] |
                          topics/subscribers[self.rosname.is_global] |
                          services/servers[self.rosname.is_global] |
                          services/clients[self.rosname.is_global] |
                          parameters/reads[self.rosname.is_global] |
                          parameters/writes[self.rosname.is_global]"
                - name: Query 2 - No Conditional Communications
                  details: "Found {entities} under a conditional statement."
                  query: "topics/publishers[len(self.conditions) > 0] |
                          topics/subscribers[len(self.conditions) > 0] |
                          services/servers[len(self.conditions) > 0] |
                          services/clients[len(self.conditions) > 0]"
                - name: Query 3 - Message Types Must Match
                  details: "Found two participants on the same topic with
                            mismatching message types - {entities}"
                  query: "for p in <nodes/publishers | nodes/subscribers>,
                              q in <nodes/publishers | nodes/subscribers>
                          where p.topic_name == q.topic_name and p.type != q.type
                          return p, q"
                - name: Query 4 - No Unbounded Queues
                  details: "Found {n} topics with infinite queues - {entities}"
                  query: "topics/publishers[self.queue_size == 0] |
                          topics/subscribers[self.queue_size == 0]"
                - name: Query 6 - One Publisher Per Topic
                  details: "Found {n} topics with multiple publishers - {entities}"
                  query: "topics[len(self.publishers) > 1]"
                - name: Query 7 - No Disconnected Similar Topics
                  details: "Found two topics with similar names and type,
                            but they are not connected. It could be a missing
                            remapping. {entities}"
                  query: "for pub in <c/nodes/publishers[self.topic.is_disconnected]>,
                              sub in <c/nodes/subscribers[self.topic.is_disconnected]>
                          where pub.type == sub.type and
                            (pub.topic.id.endswith(sub.topic.name)
                              or sub.topic.id.endswith(pub.topic.name)
                              or pub.rosname.full == sub.rosname.full
                              or pub.rosname.full.endswith(sub.rosname.own)
                              or sub.rosname.full.endswith(pub.rosname.own)
                              or pub.rosname.given == sub.rosname.given)
                          return 'pub':pub, 'sub':sub"
analysis:
    ignore:
        tags:
            - formatting
            - copyright
            - metrics
            - integer-types
